# Chapter 1 - General Overview 
Sockets in general is a mechanism for communication between programs using standard UNIX file descriptors. 
Meaning you can read(), write(), and close; UNIX file descriptors are simply non-negative integers that acts as handles 
to open files or resources which allows easy access and management. 

EXAMPLE CODE
int fd = open("example.txt", O_RDONLY); // Open the file
char buffer[256];
read(fd, buffer, 256); // Read 256 bytes
close(fd); // Close the file


Sockets are essentially a way to create communication endpoints between two programs, enabling them to exchange data. 
However, in the case that the file descriptors associated with the open files are given by the socket() API in the context of 
network programming-the file descriptor returned by the socket API is the descriptor that can be used with speicalized socket 
functions where the unqiue signatures of the send(), rec(), write(), read() can communicate between network protocols. 

In short, socket exchange data. It could be in the context of network programming or in the unix domain. 
 
The two main types of sockets relevant to network programming are SOCK_STREAM and SOCK_DGRAM. Stream sockets are used in applications like telnet, ssh, and HTTP, where data order and integrity are crucial. Datagram sockets are used in applications like TFTP, DHCP clients, multiplayer games, and streaming media, where occasional packet loss is acceptable for the sake of speed.

#Chapter 2 - IP Addresses and Data Munging 

In general there are 6 different types of IP addresses. IPv4, IPv6, public, private, dynamic, and static IP addresses.
IPv4 addresses uses 32-bit addresses and IPv6 uses 128-bit addresses. 

In terms of sokcet programming and functions. We have the data structures or structs to handle IP addresses and ports. 
These functions include addrinfo, addrinfo_in, and addrinfo_in6. 

For address conversion function we have inet_pton for converting IP address strings to binary form, and inet_ntop() for the reverse operation. 

For byte order between Big and Little Endian we have Bye order functions to convert between network and host of 2 different data types. The function names include htons(), htonl(), ntohs(), and htonl(). 

h - host,	to - to, 	n - network,	l - long, s - short; 


